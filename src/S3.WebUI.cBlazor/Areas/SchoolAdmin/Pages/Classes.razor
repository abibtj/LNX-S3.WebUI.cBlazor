@page "/schadm/classes"
@*@inject IConfiguration Configuration*@
@inject HttpClient HttpClient
@inject IClassService ClassService
@inject IMiscellaneousService MiscellaneousService
@inject ILogger<Classes> Logger
@inject AppUser AppUser
@inject IMatToaster Toaster
@using System.Text.RegularExpressions;

<MatH5>Classes</MatH5>
<br />

@if (!(classes is null))
{
    <MatButton OnClick="ShowAddClassDialogAsync" Icon="add_to_photos">Add Class</MatButton>
    <MatButton OnClick="LoadAsync" Icon="refresh">Refresh</MatButton>

    <img class="@(busy? "show-gif": "hide-gif")" src="/images/loading.gif" />

    <MatTable Items="@classes" Striped="true">
        <MatTableHeader>
            <th>Name</th>
            <th></th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Name</td>
            <td>
                <MatIconButton OnClick="@(() => ShowCloneClassDialog(context.Id))" Icon="file_copy" Attributes="@(new Dictionary<string, object>() { { "title", "Clone Class" } })"></MatIconButton>
                <MatIconButton OnClick="@(() => ShowUpdateClassDialogAsync(context.Id))" Icon="edit" Attributes="@(new Dictionary<string, object>() { { "title", "Edit Class' Information" } })"></MatIconButton>
                <MatIconButton OnClick="@(() => ShowDeleteClassDialog(context.Id))" Icon="delete_forever" Attributes="@(new Dictionary<string, object>() { { "title", "Delete Class" } })"></MatIconButton>
            </td>
        </MatTableRow>
    </MatTable>
}
else if (loadFailed)
{
    <p><em>@errorMessage</em></p>
    Toaster.Add(errorMessage, MatToastType.Danger, errorTitle, "error");
}
else
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}

@*Add / Update*@
@if (!(_class is null) && (mode == Mode.Add || mode == Mode.Update))
{
    <EditForm Model="_class" OnValidSubmit="Add_UpdateAsync">
        <PeterLeslieMorris.Blazor.Validation.Validate />
        <MatDialog IsOpen="@addUpdateDialogIsOpened" IsOpenChanged="DialogIsOpenedChanged" CanBeClosed="false">

            <MatDialogTitle>@add_UpdateTitle</MatDialogTitle>

            <MatDialogContent>
                <ValidationSummary />

                @*Class properties*@
                <div>
                    <div class="row">
                        <div class="form-group col-md-12">
                            <MatTextField @bind-Value="_class.Name" Label="Name" FullWidth="true" Required="true"></MatTextField>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-12">
                            <MatSelect TValue="string" Value="@classCategory" ValueChanged="LoadSubjectsAsync" Label="Category*" Required="true" Enhanced="true">
                                <MatOptionString Value="Nursery">Nursery</MatOptionString>
                                <MatOptionString Value="Primary">Primary</MatOptionString>
                                <MatOptionString Value="Junior Secondary">Junior Secondary</MatOptionString>
                                <MatOptionString Value="Senior Secondary">Senior Secondary</MatOptionString>
                            </MatSelect>
                        </div>
                    </div>

                </div>

                <br />

                @*Subjects*@
                <MatAccordion>
                    <MatExpansionPanel @bind-Expanded="subjectPanelExpanded">
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>Subjects*</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <div class="form-group">
                                @*<MatAutoCompleteList Items="availableSubjects" @bind-Value="selectedSubject" OnOpenedChanged="AddSubject" TItem="string" Label="Select Subject" ShowClearButton="true"></MatAutoCompleteList>*@
                                <MatAutocompleteList TItem="string" Items="availableSubjects" @bind-Value="selectedSubject" OnOpenedChanged="AddSubject" Label="Select Subject" ShowClearButton="true"></MatAutocompleteList>
                                <MatButton Type="button" OnClick="AddSubject" Icon="library_add">Add</MatButton>
                            </div>
                            <br />

                            <table class="table table-striped">
                                <tbody>
                                    @foreach (var subject in classSubjects)
                                    {
                                        <tr>
                                            <td>@(classSubjects.IndexOf(subject) + 1)</td>
                                            <td>@subject</td>
                                            <td>
                                                <MatIconButton OnClick="@(() => RemoveSubject(@subject))" Icon="delete_forever" Attributes="@(new Dictionary<string, object>() { { "title", "Remove Subject" }, { "type", "button" } })"></MatIconButton>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                </MatAccordion>

            </MatDialogContent>

            <MatDialogActions>
                <MatButton Type="button" OnClick="CloseDialogs">Cancel</MatButton>
                <MatButton Type="submit"><span class="@(busy? "oi oi-loop-circular spinning" : "")"></span>@add_UpdateButtonLabel</MatButton>
            </MatDialogActions>

        </MatDialog>
    </EditForm>
}

@*Clone*@
@if (!(_class is null) && (mode == Mode.Clone))
{
    <EditForm Model="_class" OnValidSubmit="Add_UpdateAsync">
        <PeterLeslieMorris.Blazor.Validation.Validate />
        <MatDialog IsOpen="@cloneDialogIsOpened" IsOpenChanged="DialogIsOpenedChanged" CanBeClosed="false">

            <MatDialogTitle>Clone  Class</MatDialogTitle>

            <MatDialogContent>
                <ValidationSummary />

                @*Class properties*@
                <div>
                    <div class="row">
                        <div class="form-group col-md-12">
                            <MatTextField @bind-Value="_class.Name" Label="Name" FullWidth="true" Required="true"></MatTextField>
                        </div>
                    </div>
                </div>

                <br />
            </MatDialogContent>

            <MatDialogActions>
                <MatButton Type="button" OnClick="CloseDialogs">Cancel</MatButton>
                <MatButton Type="submit"><span class="@(busy? "oi oi-loop-circular spinning" : "")"></span>Clone</MatButton>
            </MatDialogActions>

        </MatDialog>
    </EditForm>
}

@*Delete*@
@if (!(_class is null) && (mode == Mode.Delete))
{
    <MatDialog IsOpen="@deleteDialogIsOpened" IsOpenChanged="DialogIsOpenedChanged" CanBeClosed="true">

        <MatDialogTitle>Delete Class?</MatDialogTitle>

        <MatDialogContent>
            <br />
            <div _class="form-group">
                <p>Are you sure you want to delete <strong>@_class.Name</strong> permanently?</p>
            </div>
            <br />
        </MatDialogContent>

        <MatDialogActions>
            <MatButton Type="button" OnClick="CloseDialogs">Cancel</MatButton>
            <MatButton @onclick="@(() => DeleteAsync(_class.Id))"><span _class="@(busy? "oi oi-loop-circular spinning" : "")"></span>Delete</MatButton>
        </MatDialogActions>

    </MatDialog>
}


@code {

    #region variables

    private Class[] classes;
    private Class _class;
    private List<string> availableSubjects;
    private List<string> classSubjects;
    private string selectedSubject;
    private string classCategory;

    private Mode mode = Mode.None;
    private bool addUpdateDialogIsOpened;
    private bool cloneDialogIsOpened;
    private bool deleteDialogIsOpened;
    private bool subjectPanelExpanded;
    private bool busy;
    private bool loadFailed;
    private bool sessionExpired;

    private string add_UpdateTitle;
    private string clonedClassName;
    private string add_UpdateButtonLabel;
    private string errorTitle = "Error";
    private string errorMessage = "Sorry, we could not load this resource due to an error. Please, try again later.";
    #endregion

    private void AddSubject()
    {
        if (!string.IsNullOrEmpty(selectedSubject) &&
            !(classSubjects.Contains(selectedSubject)) &&
            availableSubjects.Contains(selectedSubject))
        {
            classSubjects.Insert(0, selectedSubject);
            availableSubjects.Remove(selectedSubject);
            selectedSubject = null; // This enables auto clear of the UI component used for selection
        }

        _class.SubjectsArray = classSubjects.ToArray();

    }

    private async Task Add_UpdateAsync()
    {
        busy = true;

        if (mode == Mode.Add || mode == Mode.Update)
        {
            if (mode == Mode.Add)
            {
                await ClassService.CreateAsync(_class);
            }
            else
            {
                await ClassService.UpdateAsync(_class);
            }
            await LoadAsync();
            CloseDialogs();
            Toaster.Add("Your request is being processed. Click Refresh if no change is seen shortly.", MatToastType.Info, "Request Processing", "info");

        }
        else if (mode == Mode.Clone)
        {
            if (clonedClassName.ToLowerInvariant() == Regex.Replace(_class.Name.Trim(), " {2,}", " ").ToLowerInvariant())
            {
                Toaster.Add("A different class name must be specified.", MatToastType.Danger, "Invalid Input", "error");
            }
            else
            {
                await ClassService.CreateAsync(_class);
                await LoadAsync();
                CloseDialogs();
                Toaster.Add("Your request is being processed. Click Refresh if no change is seen shortly.", MatToastType.Info, "Request Processing", "info");
            }
        }

        busy = false;
    }

    private void CloseDialogs()
    {
        // Reset fields to their defaults
        addUpdateDialogIsOpened = false;
        deleteDialogIsOpened = false;
        cloneDialogIsOpened = false;
        subjectPanelExpanded = false;

        _class = null;

        availableSubjects = null;
        classSubjects = null;
        classCategory = null;

        mode = Mode.None;
    }

    private async Task DeleteAsync(string id)
    {
        busy = true;

        await ClassService.DeleteAsync(id);
        await LoadAsync();
        CloseDialogs();
        Toaster.Add("Your request is being processed. Click Refresh if no change is seen shortly.", MatToastType.Info, "Request Processing", "info");

        busy = false;
    }

    private void DialogIsOpenedChanged(bool isOpened)
    {
        if (!isOpened)
        {
            CloseDialogs();
        }
    }

    private async Task LoadAsync()
    {
        busy = true;

        try
        {
            if (AppUser.IsSchoolAdmin || AppUser.IsAssistantSchoolAdmin)
            {
                classes = await ClassService.GetAllAsync(schoolId: AppUser.SchoolId);
            }
            else
            {
                loadFailed = true;
                errorMessage = "You are not authorised to view this resource.";
            }
        }
        catch (System.Net.Http.HttpRequestException ex)
        {
            loadFailed = true;
            (errorTitle, errorMessage, sessionExpired) = ErrorMessageHelper.GetMessage(ex);

            if (sessionExpired)
            {
                try //TODO: Remove the following try catch block when globa error handling is implemented
                {
                    await AppUser.SignOutAsync();
                }
                catch (Exception e)
                {
                    Logger.LogWarning(e, "Unable to log user out.");
                }
            }

            Logger.LogWarning(ex, "Failed to load resource.");
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Logger.LogWarning(ex, "Failed to load resource.");
        }

        busy = false;
    }

    private async Task LoadSubjectsAsync(string category)
    {
        _class.Category = category;
        classCategory = category;

        // Load subjects from json file
        availableSubjects = await HttpClient.GetJSONAsync<List<string>>($"json-data/subjects/{category}.json");

        classSubjects = new List<string>();
    }

    protected override async Task OnInitializedAsync()
    {
        if(!AppUser.IsSignedIn)
        {
            await AppUser.InitializeAsync();
        }
        
        await LoadAsync();
    }

    private void RemoveSubject(string subject)
    {
        classSubjects.Remove(subject);
        availableSubjects.Add(subject);
        availableSubjects.Sort();

        _class.SubjectsArray = classSubjects.ToArray();
    }

    private async Task ShowAddClassDialogAsync()
    {
        busy = true;

        _class = new Class { SchoolId = AppUser.SchoolId };
        classSubjects = new List<string>();

        add_UpdateTitle = "Add Class";
        add_UpdateButtonLabel = "Add";

        mode = Mode.Add;
        addUpdateDialogIsOpened = true;

        busy = false;
    }

    private void ShowCloneClassDialog(string id)
    {
        busy = true;

        //_class = await ClassService.GetAsync(id);
        _class = classes.FirstOrDefault(x => x.Id == id);
        clonedClassName = _class.Name;

        mode = Mode.Clone;
        cloneDialogIsOpened = true;

        busy = false;
    }

    private void ShowDeleteClassDialog(string id)
    {
        busy = true;

        //_class = await ClassService.GetAsync(id);
        _class = classes.FirstOrDefault(x => x.Id == id);

        mode = Mode.Delete;
        deleteDialogIsOpened = true;

        busy = false;
    }

    private async Task ShowUpdateClassDialogAsync(string id)
    {
        busy = true;

        //_class = await ClassService.GetAsync(id);
        _class = classes.FirstOrDefault(x => x.Id == id);
        classCategory = _class.Category;

        await LoadSubjectsAsync(_class.Category); //Loads available subject for this category from json file

        classSubjects = _class.SubjectsArray.ToList();

        foreach (var subject in classSubjects)
        {
            availableSubjects.Remove(subject);
        }

        add_UpdateTitle = "Update Class";
        add_UpdateButtonLabel = "Update";

        mode = Mode.Update;
        addUpdateDialogIsOpened = true;

        busy = false;
    }

}
