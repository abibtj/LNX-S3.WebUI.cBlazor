@page "/spadm/schools"
@inject ISchoolService SchoolService
@inject IMiscellaneousService MiscellaneousService
@inject ILogger<Schools> Logger
@inject AppUser AppUser
@inject IMatToaster Toaster
@inject BlazorComponentColumnCollection<SchoolStatistics> Collection
@using Blazor.FlexGrid.Components
@using Blazor.FlexGrid.DataAdapters
@using Blazor.FlexGrid.Components.Configuration
@using Blazor.FlexGrid.DataSet.Options
@*@addTagHelper *, Blazor.FlexGrid*@

<MatH5>Schools</MatH5>
<br />

@if (!(schoolStats is null))
{
    <MatButton OnClick="ShowAddSchoolDialogAsync" Icon="add">Add School</MatButton>
    <MatButton OnClick="LoadAsync" Icon="refresh">Refresh</MatButton>

    <img class="@(busy? "show-gif": "hide-gif")" src="/images/loading.gif" />

    <GridView DataAdapter="@schoolStats" PageSize="10"></GridView>

    @*<MatTable Items="@schoolStats" Striped="true">
            <MatTableHeader>
                <th>Name</th>
                <th>Location</th>
                <th>Category</th>
                <th>Classes</th>
                <th>Students</th>
                <th>Teachers</th>
                <th>Administrator</th>
                <th>Phone</th>
                <th></th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Name</td>
                <td>@context.Location</td>
                <td>@context.Category</td>
                <td>@context.NumberOfClasses</td>
                <td>@context.NumberOfStudents</td>
                <td>@context.NumberOfTeachers</td>
                <td>@context.Administrator</td>
                <td>@context.PhoneNumber</td>
                <td>
                    <MatIconButton OnClick="@(() => ShowUpdateSchoolDialogAsync(context.Id))" Icon="edit" Attributes="@(new Dictionary<string, object>() { { "title", "Edit School's Information" } })"></MatIconButton>
                    <MatIconButton OnClick="@(() => ShowDeleteSchoolDialogAsync(context.Id))" Icon="delete_forever" Attributes="@(new Dictionary<string, object>() { { "title", "Delete School" } })"></MatIconButton>
                </td>
            </MatTableRow>
        </MatTable>*@
}
else if (loadFailed)
{
    <p><em>@errorMessage</em></p>
    Toaster.Add(errorMessage, MatToastType.Danger, errorTitle, "error");
}
else
{
    <MatProgressBar Indeterminate="true"></MatProgressBar>
}

@*Add / Update*@
@if (!(school is null) && (mode == Mode.Add || mode == Mode.Update))
{
    <EditForm Model="school" OnValidSubmit="Add_UpdateAsync">
        <PeterLeslieMorris.Blazor.Validation.Validate />
        <MatDialog IsOpen="@addUpdateDialogIsOpened" IsOpenChanged="DialogIsOpenedChanged" CanBeClosed="false">

            <MatDialogTitle>@add_UpdateTitle</MatDialogTitle>

            <MatDialogContent>
                <ValidationSummary />

                @*School properties*@
                <div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <MatTextField @bind-Value="school.Name" Label="Name" Required="true"></MatTextField>
                        </div>
                        <div class="form-group col-md-6">
                            <MatSelect TValue="string" @bind-Value="school.Category" Label="Category*" Required="true" Enhanced="true">
                                <MatOptionString Value="Nursery">Nursery</MatOptionString>
                                <MatOptionString Value="Primary">Primary</MatOptionString>
                                <MatOptionString Value="Secondary">Secondary</MatOptionString>
                                <MatOptionString Value="Nursery and Primary">Nursery and Primary</MatOptionString>
                                <MatOptionString Value="Nursery, Primary and Secondary">Nursery, Primary and Secondary</MatOptionString>
                                <MatOptionString Value="Others">Others</MatOptionString>
                            </MatSelect>
                        </div>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-6">
                            <MatTextField @bind-Value="school.Email" Label="Email" Required="true"></MatTextField>
                        </div>
                        <div class="form-group col-md-6">
                            <MatTextField @bind-Value="school.PhoneNumber" Label="Phone Number" Required="true"></MatTextField>
                        </div>
                    </div>

                </div>

                <br />
                @*Address*@
                <MatAccordion>
                    <MatExpansionPanel ExpandedChanged="ToggleAddressVisibilityAsync">
                        <MatExpansionPanelSummary>
                            <MatExpansionPanelHeader>Address</MatExpansionPanelHeader>
                        </MatExpansionPanelSummary>
                        <MatExpansionPanelDetails>
                            <div class="row">
                                <div class="form-group">
                                    <MatButton Type="button" OnClick="Add_RemoveAddress">@add_RemoveAddressButtonLabel</MatButton>
                                </div>
                            </div>

                            @if (!(school.Address is null))
                            {
                                <AddressComponent Address="school.Address"></AddressComponent>
                            }
                        </MatExpansionPanelDetails>
                    </MatExpansionPanel>
                </MatAccordion>


            </MatDialogContent>

            <MatDialogActions>
                <MatButton Type="button" OnClick="CloseDialogs">Cancel</MatButton>
                <MatButton Type="submit"><span class="@(busy? "oi oi-loop-circular spinning" : "")"></span>@add_UpdateButtonLabel</MatButton>
            </MatDialogActions>

        </MatDialog>
    </EditForm>
}

@*Delete*@
@if (!(school is null) && (mode == Mode.Delete))
{
    <MatDialog IsOpen="@deleteDialogIsOpened" IsOpenChanged="DialogIsOpenedChanged" CanBeClosed="true">

        <MatDialogTitle>Delete School?</MatDialogTitle>

        <MatDialogContent>
            <br />
            <div class="form-group">
                <p>Are you sure you want to delete <strong>@school.Name</strong> permanently?</p>
            </div>
            <br />
        </MatDialogContent>

        <MatDialogActions>
            <MatButton Type="button" OnClick="CloseDialogs">Cancel</MatButton>
            <MatButton @onclick="@(() => DeleteAsync(school.Id))"><span class="@(busy? "oi oi-loop-circular spinning" : "")"></span>Delete</MatButton>
        </MatDialogActions>

    </MatDialog>
}

@{
    RenderFragment<SchoolStatistics> editFragment = (x) =>@<MatIconButton OnClick = "@(() => (ShowUpdateSchoolDialogAsync(x.Id)))" Icon="edit" Attributes="@(new Dictionary<string, object>() { { "title", "Edit School's Information" } })"></MatIconButton>;

    Collection.AddColumnValueRenderFunction(x => x.Name, editFragment);
}


@code {

    #region variables

    //private SchoolStatistics[] schoolStats;
    CollectionTableDataAdapter<SchoolStatistics> schoolStats;
    private School school;

    private Mode mode = Mode.None;
    private bool addUpdateDialogIsOpened;
    private bool deleteDialogIsOpened;
    private bool busy;
    private bool loadFailed;
    private bool sessionExpired;

    private string add_UpdateTitle;
    private string add_UpdateButtonLabel;
    private string add_RemoveAddressButtonLabel;
    private string errorTitle = "Error";
    private string errorMessage = "Sorry, we could not load this resource due to an error. Please, try again later.";
    #endregion

    private void Add_RemoveAddress()
    {
        if (school.Address is null)
        {
            school.Address = new SchoolAddress { SchoolId = Guid.Empty.ToString(), Country = "Nigeria" };
            add_RemoveAddressButtonLabel = "Remove";
        }
        else
        {
            school.Address = null;
            school.AddressId = null;
            add_RemoveAddressButtonLabel = "Add";
        }
    }

    private async Task Add_UpdateAsync()
    {
        busy = true;

        if (mode == Mode.Add)
        {
            await SchoolService.CreateAsync(school);
        }
        else if (mode == Mode.Update)
        {
            await SchoolService.UpdateAsync(school);
        }

        await LoadAsync();
        CloseDialogs();
        Toaster.Add("Your request is being processed. Click Refresh if no change is seen shortly.", MatToastType.Info, "Request Processing", "info");

        busy = false;
    }

    private void CloseDialogs()
    {
        // Reset fields to their defaults
        addUpdateDialogIsOpened = false;
        deleteDialogIsOpened = false;

        add_RemoveAddressButtonLabel = null;
        school = null;
        mode = Mode.None;
    }

    private async Task DeleteAsync(string id)
    {
        busy = true;

        await SchoolService.DeleteAsync(id);
        await LoadAsync();
        CloseDialogs();
        Toaster.Add("Your request is being processed. Click Refresh if no change is seen shortly.", MatToastType.Info, "Request Processing", "info");

        busy = false;
    }

    private void DialogIsOpenedChanged(bool isOpened)
    {
        if (!isOpened)
        {
            CloseDialogs();
        }
    }

    private async Task LoadAsync()
    {
        busy = true;

        try
        {
            if (AppUser.IsSuperAdmin || AppUser.IsAdmin)
            {
                var data = await SchoolService.GetAllStatsAsync();
                schoolStats = new CollectionTableDataAdapter<SchoolStatistics>(data);

                //schoolStats = await SchoolService.GetAllStatsAsync();
            }
            else
            {
                loadFailed = true;
                errorMessage = "You are not authorised to view this resource.";
            }
        }
        catch (System.Net.Http.HttpRequestException ex)
        {
            loadFailed = true;
            (errorTitle, errorMessage, sessionExpired) = ErrorMessageHelper.GetMessage(ex);

            if (sessionExpired)
            {
                try //TODO: Remove the following try catch block when globa error handling is implemented
                {
                    await AppUser.SignOutAsync();
                }
                catch (Exception e)
                {
                    Logger.LogWarning(e, "Unable to log user out.");
                }
            }

            Logger.LogWarning(ex, "Failed to load resource.");
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Logger.LogWarning(ex, "Failed to load resource.");
        }

        busy = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
       
    }

    protected override async Task OnInitializedAsync()
    {
        if(!AppUser.IsSignedIn)
        {
            await AppUser.InitializeAsync();
        }

        await LoadAsync();
    }

    private async Task ShowAddSchoolDialogAsync()
    {
        busy = true;

        school = new School();

        add_UpdateTitle = "Add School";
        add_UpdateButtonLabel = "Add";
        add_RemoveAddressButtonLabel = "Add";
        mode = Mode.Add;
        addUpdateDialogIsOpened = true;

        busy = false;
    }

    private async Task ShowDeleteSchoolDialogAsync(string id)
    {
        busy = true;

        school = await SchoolService.GetAsync(id);

        mode = Mode.Delete;
        deleteDialogIsOpened = true;

        busy = false;
    }

    private async Task ShowUpdateSchoolDialogAsync(string id)
    {
        busy = true;

        school = await SchoolService.GetAsync(id);
        if (!(string.IsNullOrEmpty(school.AddressId)))
        {
            var address = await MiscellaneousService.GetAddressAsync(school.AddressId);
            school.Address = new SchoolAddress
            {
                Line1 = address.Line1,
                Line2 = address.Line2,
                Town = address.Town,
                State = address.State,
                Country = address.Country,
                SchoolId = school.Id
            };

            add_RemoveAddressButtonLabel = "Remove";
        }

        add_UpdateTitle = "Update School";
        add_UpdateButtonLabel = "Update";

        mode = Mode.Update;
        addUpdateDialogIsOpened = true;

        //await InvokeAsync(() =>
        //{
        //    StateHasChanged();
        //});

        busy = false;
    }

    private async Task ToggleAddressVisibilityAsync(bool addressVisible)
    {
        if (addressVisible && school.Address is null)
        {
            if (!string.IsNullOrEmpty(school.AddressId)) // This school has an address, load it.
            {
                var address = await MiscellaneousService.GetAddressAsync(school.AddressId);
                school.Address = new SchoolAddress
                {
                    Line1 = address.Line1,
                    Line2 = address.Line2,
                    Town = address.Town,
                    State = address.State,
                    Country = address.Country,
                    SchoolId = school.Id
                };

                add_RemoveAddressButtonLabel = "Remove";
            }
            else
            {
                add_RemoveAddressButtonLabel = "Add";
            }
        }
    }

}
