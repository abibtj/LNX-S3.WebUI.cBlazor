@page "/change-password"
@*@page "/change-password/{ReturnUrl}"*@
@inject NavigationManager NavigationManager
@inject AppUser AppUser
@inject IIdentityService IdentityService
@inject IMatToaster Toaster


@if (!(changePassword is null))
{
    <EditForm Model="changePassword" OnValidSubmit="@ChangePasswordAsync">
        <PeterLeslieMorris.Blazor.Validation.Validate />

        <br />

        <div class="row">
            <div class="col-md-4 offset-md-4 mat-elevation-z24">
                <MatH6>Change Password</MatH6>
                <br />
                <p><MatTextField @bind-Value="changePassword.CurrentPassword" Label="Current Password" Type="@(showPassword ? "text" : "password")" IconOnClick="ToggleShowPassword" Icon="@(showPassword ? "radio_button_unchecked" : "remove_red_eye")" IconTrailing="true" FullWidth="true" Required="true"></MatTextField></p>

                <div class="form-group">
                    <MatTextField @bind-Value="changePassword.NewPassword" Label="New Password" Type="@(showPassword ? "text" : "password")" IconOnClick="ToggleShowPassword" Icon="@(showPassword ? "radio_button_unchecked" : "remove_red_eye")" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    <ValidationMessage For="@(() => changePassword.NewPassword)" />
                </div>

                <div class="form-group">
                    <MatTextField @bind-Value="changePassword.ConfirmPassword" Label="Confirm Password" Type="@(showPassword ? "text" : "password")" IconOnClick="ToggleShowPassword" Icon="@(showPassword ? "radio_button_unchecked" : "remove_red_eye")" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
                    <ValidationMessage For="@(() => changePassword.ConfirmPassword)" />
                </div>


                <br />
                <MatDialogActions>
                    @*To push the buttons to the right*@
                    <MatButton Type="button" OnClick="GoHome">Back</MatButton>
                    <MatButton Type="submit"><span class="@(busy? "oi oi-loop-circular spinning" : "")"></span>Change</MatButton>
                </MatDialogActions>
            </div>
        </div>

    </EditForm>
}

@code{

    //[Parameter]
    //public string ReturnUrl { get; set; }

    private bool busy;
    private bool showPassword;
    private ChangePassword changePassword;

    private async Task ChangePasswordAsync()
    {
        busy = true;

        try
        {
            await IdentityService.ChangePasswordAsync(changePassword);
            GoHome(); // Changed password successfully.
            Toaster.Add("Your request is being processed.", MatToastType.Info, "Request Processing", "info");
        }
        catch (Exception)
        {
            Toaster.Add("Unable to change your password. Please, enter correct password.", MatToastType.Danger, "Error", "error");
        }

        busy = false;
    }

    private void GoHome()
    {
        // Reset fields to their defaults
        showPassword = false;
        changePassword = null;

        NavigationManager.NavigateTo("");
    }

    protected override async Task OnInitializedAsync()
        => changePassword = new ChangePassword { UserId = AppUser.Id };

    private void ToggleShowPassword()
       => showPassword = !showPassword;
}


