#pragma checksum "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\Areas\SchoolAdmin\Pages\ScoresEntryTasks.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "13f9c579d6dd4c1e28652b242b695d9fe17c0495"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace S3.WebUI.cBlazor.Areas.SchoolAdmin.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using S3.WebUI.cBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using S3.WebUI.cBlazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using S3.WebUI.cBlazor.Shared.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using S3.WebUI.cBlazor.Shared.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using S3.WebUI.cBlazor.Shared.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\_Imports.razor"
using Microsoft.Extensions.Logging;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\Areas\_Imports.razor"
using S3.WebUI.cBlazor.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\Areas\_Imports.razor"
using S3.WebUI.cBlazor.Shared.Services.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\Areas\_Imports.razor"
using S3.WebUI.cBlazor.Utility;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\Areas\_Imports.razor"
using S3.WebUI.cBlazor.Models.Validators;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/schadm/scores-entry-tasks")]
    public partial class ScoresEntryTasks : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 143 "C:\Users\Abeeb\Documents\S3.WebUI.cBlazor\Areas\SchoolAdmin\Pages\ScoresEntryTasks.razor"
       

    #region variables

    private ScoresEntryTask[] scoresEntryTasks;
    private ScoresEntryTask scoresEntryTask;
    private Class[] availableClasses;
    private Teacher[] availableTeachers;
    private string selectedTeacher;
    private string[] classSubjects;

    private Mode mode = Mode.None;
    private bool addUpdateDialogIsOpen;
    private bool deleteDialogIsOpen;
    private bool busy;
    private bool loadFailed;
    private bool sessionExpired;

    private string selectedClassId;
    private string add_UpdateTitle;
    private string add_UpdateButtonLabel;
    private string errorTitle = "Error";
    private string errorMessage = "Sorry, we could not load this resource due to an error. Please, try again later.";
    #endregion


    private async Task Add_UpdateAsync()
    {
        busy = true;

        if (mode == Mode.Add)
        {
            await ScoresEntryTaskService.CreateAsync(scoresEntryTask);
        }
        else if (mode == Mode.Update)
        {
            await ScoresEntryTaskService.UpdateAsync(scoresEntryTask);
        }

        await LoadAsync();
        CloseDialogs();
        Toaster.Add("Your request is being processed. Click Refresh if no change is seen shortly.", MatToastType.Info, "Request Processing", "info");

        busy = false;
    }

    private void CloseDialogs()
    {
        // Reset fields to their defaults
        addUpdateDialogIsOpen = false;
        deleteDialogIsOpen = false;

        selectedClassId = null;
        availableClasses = null;
        availableTeachers = null;
        selectedTeacher = null;
        scoresEntryTask = null;
        classSubjects = null;

        mode = Mode.None;
    }

    private async Task DeleteAsync(string id)
    {
        busy = true;

        await ScoresEntryTaskService.DeleteAsync(id);
        await LoadAsync();
        CloseDialogs();
        Toaster.Add("Your request is being processed. Click Refresh if no change is seen shortly.", MatToastType.Info, "Request Processing", "info");

        busy = false;
    }

    private void DialogIsOpenChanged(bool isOpened)
    {
        if (!isOpened)
        {
            CloseDialogs();
        }
    }

    private async Task LoadAsync()
    {
        busy = true;

        try
        {
            if (AppUser.IsSchoolAdmin || AppUser.IsAssistantSchoolAdmin)
            {
                scoresEntryTasks = await ScoresEntryTaskService.GetAllAsync(schoolId: AppUser.SchoolId);
            }
            else
            {
                loadFailed = true;
                errorMessage = "You are not authorised to view this resource.";
            }
        }
        catch (System.Net.Http.HttpRequestException ex)
        {
            loadFailed = true;
            (errorTitle, errorMessage, sessionExpired) = ErrorMessageHelper.GetMessage(ex);

            if (sessionExpired)
            {
                try //TODO: Remove the following try catch block when globa error handling is implemented
                {
                    await AppUser.SignOutAsync();
                }
                catch (Exception e)
                {
                    Logger.LogWarning(e, "Unable to log user out.");
                }
            }

            Logger.LogWarning(ex, "Failed to load resource.");
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Logger.LogWarning(ex, "Failed to load resource.");
        }

        busy = false;
    }

    private void LoadSubjects(string selectedClassId)
    {
        var selectedClass = availableClasses.ToList().Find(x => x.Id == selectedClassId);

        this.selectedClassId = selectedClassId;
        scoresEntryTask.ClassId = selectedClassId;
        scoresEntryTask.ClassName = selectedClass.Name;
        classSubjects = selectedClass.SubjectsArray;
        scoresEntryTask.Subject = null; // When class changes, select only from subjects present in the new class
    }

    private async Task LoadRequirementsAsync()
    {
        availableClasses = await ClassService.GetAllAsync(schoolId: AppUser.SchoolId);
        availableTeachers = await TeacherService.GetAllSignedUpAsync(schoolId: AppUser.SchoolId);
    }

    protected override async Task OnInitializedAsync()
    {
        await AppUser.InitializeAsync();
        await LoadAsync();
        //StateHasChanged();
    }

    private void SetSelectedTeacher(Teacher selectedTeacher)
    {
        scoresEntryTask.TeacherId = selectedTeacher.Id;
        scoresEntryTask.TeacherName = selectedTeacher.FullName;
        this.selectedTeacher = selectedTeacher.FullName;
    }

    private async Task ShowAddScoresEntryTaskDialogAsync()
    {
        busy = true;
        mode = Mode.Add;

        scoresEntryTask = new ScoresEntryTask { SchoolId = AppUser.SchoolId };
        await LoadRequirementsAsync();

        add_UpdateTitle = "Add Task";
        add_UpdateButtonLabel = "Add";

        addUpdateDialogIsOpen = true;

        busy = false;
    }

    private void ShowDeleteScoresEntryTaskDialog(string id)
    {
        busy = true;

        //scoresEntryTask = await ScoresEntryTaskService.GetAsync(id);
        scoresEntryTask = scoresEntryTasks.FirstOrDefault(x => x.Id == id);

        mode = Mode.Delete;
        deleteDialogIsOpen = true;

        busy = false;
    }

    private async Task ShowUpdateScoresEntryTaskDialogAsync(string id)
    {
        busy = true;
        mode = Mode.Update;

        //scoresEntryTask = await ScoresEntryTaskService.GetAsync(id);
        scoresEntryTask = scoresEntryTasks.FirstOrDefault(x => x.Id == id);
        await LoadRequirementsAsync();

        this.selectedClassId = scoresEntryTask.ClassId;
        this.selectedTeacher = availableTeachers.ToList().Find(x => x.Id == scoresEntryTask.TeacherId).FullName;

        classSubjects = availableClasses.ToList().Find(x => x.Id == scoresEntryTask.ClassId).SubjectsArray;

        add_UpdateTitle = "Update Task";
        add_UpdateButtonLabel = "Update";

        addUpdateDialogIsOpen = true;

        busy = false;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster Toaster { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppUser AppUser { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogger<ScoresEntryTasks> Logger { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITeacherService TeacherService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IClassService ClassService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IScoresEntryTaskService ScoresEntryTaskService { get; set; }
    }
}
#pragma warning restore 1591
